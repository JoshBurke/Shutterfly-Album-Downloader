def analyze_bytes(moments_str):
    # Convert hex string to bytes
    try:
        bytes_data = bytes.fromhex(moments_str)
        
        print("Length in bytes:", len(bytes_data))
        print("\nFirst 50 bytes as hex pairs:")
        for i, b in enumerate(bytes_data[:50]):
            if i % 16 == 0:
                print()
            print(f"{b:02x}", end=" ")
            
        print("\n\nFirst 50 bytes as ASCII where printable:")
        for i, b in enumerate(bytes_data[:50]):
            if i % 16 == 0:
                print()
            if 32 <= b <= 126:  # printable ASCII range
                print(chr(b), end=" ")
            else:
                print(".", end=" ")
                
        print("\n\nUnique byte sequences of length 4:")
        sequences = {}
        for i in range(len(bytes_data)-3):
            seq = bytes_data[i:i+4]
            if seq in sequences:
                sequences[seq].append(i)
            else:
                sequences[seq] = [i]
        
        # Print sequences that appear multiple times
        for seq, positions in sequences.items():
            if len(positions) > 1:
                print(f"\nSequence {seq.hex()}: appears at positions {positions}")
                
    except Exception as e:
        print(f"Error analyzing bytes: {e}")

def analyze_hex_string(hex_str):
    print(f"String length: {len(hex_str)} characters")
    
    # Try to convert to bytes normally
    try:
        bytes_data = bytes.fromhex(hex_str)
        print(f"\nSuccessfully converted to {len(bytes_data)} bytes")
        return bytes_data
    except ValueError as e:
        print(f"\nError converting to bytes: {e}")
        
    # Try padding with a zero
    try:
        padded = hex_str + '0'
        bytes_data = bytes.fromhex(padded)
        print(f"\nSucceeded after padding to {len(padded)} characters")
        print(f"Resulting in {len(bytes_data)} bytes")
        return bytes_data
    except ValueError as e:
        print(f"\nError even with padding: {e}")
        
    return None

def extract_moment_ids(moments_string):
    # Split into 277-character chunks
    records = [moments_string[i:i+277] for i in range(0, len(moments_string), 277)]
    
    # Extract moment IDs (skip 7 char header, get the next 16 chars)
    moment_ids = [record[9:25] for record in records]
    
    return moment_ids

moments = "15c5e2f091819303210352763676a59bf0d80144000676a59bf027056538841676a59bfb1de8f1227d1e9ab2d2d2d2d2d2d30302d6e335734386f443932764c66796a544e524a4f786b414e4970564d78566a484252576556376c7542523475596d7152527666746f747270583538414e666b34596c644d544c6662744a5f5f77595642515f3469546f7715c5e2f0e1819302961218093676a59bf0d80144000676a59bf027056538841676a59bf83191fb4e890bb572d2d2d2d2d2d30302d6e335734386f443932764c66796a544e524a4f786b414e4970564d78566a484252576556376c754252347550455a47317375324e31364f71754633374e7773436c644d544c6662744a5f5f77595642515f3469546f7715c5e2f0f1819302956401255676a59c30d80144000676a59c3027056538841676a59c3b19e6bb82cfa84612d2d2d2d2d2d30302d6e335734386f443932764c66796a544e524a4f786b414e4970564d78566a484252576556376c7542523476574f52786e30504c714a6e586848436e354e77347561415572676e776776516e5a5f31525762374e5a504115c5e2f161819302989365787676a59c30d80144000676a59c3027056538841676a59c324217f82be0232472d2d2d2d2d2d30302d6e335734386f443932764c66796a544e524a4f786b414e4970564d78566a484252576556376c7542523474637a745f37696f7a596562727a6b42784a5248734334784a32547775373551465f6a697a4d6b42315a644115c5e2f181819302836896430676a59c60d80144000676a59c6027056538841676a59c65e1aa36c94da34b22d2d2d2d2d2d30302d6e335734386f443932764c66796a544e524a4f786b414e4970564d78566a484252576556376c754252347366556d562d6f736f422d582d5139586358373936594b776735796477486970793361495a426639644e595115c5e2f3b1819303083901312676a59c70d80144000676a59c7027056538841676a59c7ab8102e203ccc6242d2d2d2d2d2d30302d6e335734386f443932764c66796a544e524a4f786b414e4970564d78566a484252576556376c7542523474545f35594262726b4774494341786b4266776f4f5056376e7458514f65775767737a5650444f515057577715c5e2f3c1819303118962982676a59c90d80144000676a59c9027056538841676a59c9f42ca5e09baf1d5e2d2d2d2d2d2d30302d6e335734386f443932764c66796a544e524a4f786b414e4970564d78566a484252576556376c75425234745051696e746a335338545257365678584b7842455a56376e7458514f65775767737a5650444f515057577715c5e2f451819302999818812676a59c90d80144000676a59c9027056538841676a59c9ea4fd4977a2edced2d2d2d2d2d2d30302d6e335734386f443932764c66796a544e524a4f786b414e4970564d78566a484252576556376c75425234764e48784c3849364872304f72487630636d636f416f56376e7458514f65775767737a5650444f515057577715c5e2f461819302956401282676a59cc0d80144000676a59cc027056538841676a59cc52ddce8d333a77c82d2d2d2d2d2d30302d6e335734386f443932764c66796a544e524a4f786b414e4970564d78566a484252576556376c75425234746b4f44584b4e794c76654a4a59687178526d5a524256376e7458514f65775767737a5650444f515057577715c5e2f4c1819302996705778676a59cd0d80144000676a59cd027056538841676a59cd5fc800832ad822652d2d2d2d2d2d30302d6e335734386f443932764c66796a544e524a4f786b414e4970564d78566a484252576556376c75425234754b48496e67336c3636313664706f5a6c43517a4349556e446e75346748485770667959713557777a6d4e6715c5e2f4e1819303118962996676a59ce0d80144000676a59ce027056538841676a59ced5b5230cc945bd052d2d2d2d2d2d30302d6e335734386f443932764c66796a544e524a4f786b414e4970564d78566a484252576556376c75425234742d4f6336742d68453744394170684750493430394d356359646642336a526f4c5f565a494c61584575666715e295f8d1819300945854649676a514d0215030f00676a514d027056538841676a514dcb8ff779bd7777912d2d2d2d2d2d30302d6e335734386f443932764c66796a544e524a4f786b414e4970564d78566a484252576556376c7542523476666d6a6f507934357030687a57357a46434a6f4d56565a56353174344d686a624577524e794773634f676715e295f941819300867637628676a514c0215031500676a514c027056538841676a514c650eee1658b12df22d2d2d2d2d2d30302d6e335734386f443932764c66796a544e524a4f786b414e4970564d78566a484252576556376c7542523475354b67344f7043624567766563726f667a656c5349556e446e75346748485770667959713557777a6d4e6715e2969fc1819300819599844676a514c0213030d00676a514c027056538841676a514b888b3f332c723f822d2d2d2d2d2d30302d6e335734386f443932764c66796a544e524a4f786b414e4970564d78566a484252576556376c75425234755a543157733043474b55473158755439585a706a5a726e486a4379495a7535396f563277655f6b4d473941"

# analyze_bytes(moments)
# print(analyze_hex_string(moments))
ids = extract_moment_ids(moments)
print("Found moment IDs:", ids)